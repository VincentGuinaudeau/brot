intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.
#import impl_libs += libhello%lib{hello}

lib{brot}: {hxx ixx txx mxx cxx}{** -version}  $impl_libs $intf_libs # hxx{version}

# Include the generated version header into the distribution (so that we don't
# pick up an installed one) and don't remove it when cleaning in src (so that
# clean results in a state identical to distributed).
#
# hxx{version}: in{version} $src_root/manifest
# {
#   dist  = true
#   clean = ($src_root != $out_root)
# }

# Build options.
#
cxx.poptions =+ "-I$out_root" "-I$src_root"

# obja{*}: cxx.poptions += -DLIBBROT_STATIC_BUILD
# objs{*}: cxx.poptions += -DLIBBROT_SHARED_BUILD
# # Export options.
# #
# lib{brot}:
# {
#   cxx.export.poptions = "-I$out_root" "-I$src_root"
#   cxx.export.libs = $intf_libs
# }
# liba{brot}: cxx.export.poptions += -DLIBBROT_STATIC
# libs{brot}: cxx.export.poptions += -DLIBBROT_SHARED


# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{brot}: bin.lib.version = @"-$version.project_id"
else
  lib{brot}: bin.lib.version = @"-$version.major.$version.minor"

# Install into the libbrot/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
{hxx ixx txx mxx}{*}:
{
  install         = include/libbrot/
  install.subdirs = true
}
